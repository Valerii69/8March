import React, { useEffect, useRef, useState } from "react";
import "./index.css";
import { gsap } from "gsap"; // GSAP –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
import Typed from "typed.js"; // Typed.js –¥–ª—è —Ç–µ–∫—Å—Ç—É
import Carpet from "./carpetSmoll.png"; // –Ü–º–ø–æ—Ä—Ç –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è

function App() {
  const petalsRef = useRef(null);
  const textRef = useRef(null);
  const authorRef = useRef(null);
  const carpetRef = useRef(null); // üëà –î–æ–¥–∞—î–º–æ ref –¥–ª—è –∫–∏–ª–∏–º–∞
  const [showCarpet, setShowCarpet] = useState(false); // –°—Ç–∞–Ω –¥–ª—è –∫–∏–ª–∏–º–∞

  useEffect(() => {
    const warp = petalsRef.current;
    const total = 50;
    const w = window.innerWidth;
    const h = window.innerHeight;

    if (!warp) return;

    for (let i = 0; i < total; i++) {
      const div = document.createElement("div");
      gsap.set(div, {
        attr: { class: "dot" },
        x: R(0, w),
        y: R(-200, -150),
        z: R(-200, 200),
      });
      warp.appendChild(div);
      animm(div, h);
    }

    function animm(elm, h) {
      gsap.to(elm, {
        duration: R(6, 15),
        y: h + 100,
        ease: "none",
        repeat: -1,
        delay: -15,
      });
      gsap.to(elm, {
        duration: R(4, 8),
        x: "+=100",
        rotationZ: R(0, 180),
        repeat: -1,
        yoyo: true,
        ease: "sine.inOut",
      });
      gsap.to(elm, {
        duration: R(2, 8),
        rotationX: R(0, 360),
        rotationY: R(0, 360),
        repeat: -1,
        yoyo: true,
        ease: "sine.inOut",
        delay: -5,
      });
    }

    function R(min, max) {
      return min + Math.random() * (max - min);
    }

    // –ê–Ω—ñ–º–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É Typed.js
    if (textRef.current) {
      const typed = new Typed(textRef.current, {
        strings: [
          "–ó 8 –±–µ—Ä–µ–∑–Ω—è –≤—ñ—Ç–∞—é! <br> –í–∏–±–∞—á, –∫–≤—ñ—Ç—ñ–≤ –Ω–µ –¥–∞—Ä—é, <br> –í—ñ–¥ –¥—É—à—ñ –ø–æ–∑–¥–æ—Ä–æ–≤–ª—è—é <br> –Ü –ª–∏—Å—Ç–∞ —Ç–æ–±—ñ —è —à–ª—é. <br>–í –Ω—å–æ–º—É –ø—Ä–æ—Å—Ç–æ –≤—Å–µ –π –∫—Ä–∞—Å–∏–≤–æ,<br> –¢–µ–ø–ª–æ—Ç–∞ –º–æ—ó—Ö –¥—É–º–æ–∫,<br> –•–æ—á—É, —â–æ–± –∂–∏–ª–∞ —â–∞—Å–ª–∏–≤–æ, <br> –ù–∞–π–ø—Ä–µ–∫—Ä–∞—Å–Ω—ñ—à–∞ –∑ –∂—ñ–Ω–æ–∫.",
        ],
        startDelay: 3000,
        typeSpeed: 50,
        backSpeed: 0,
        fadeOut: true,
        loop: false,
        showCursor: false,
        onComplete: function () {
          if (authorRef.current) {
            authorRef.current.style.opacity = 1;
            setShowCarpet(true); // –í–º–∏–∫–∞—î–º–æ –∫–∏–ª–∏–º –ø—ñ—Å–ª—è —Ç–µ–∫—Å—Ç—É
          }
        },
      });

      return () => typed.destroy();
    }
  }, []);

  // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å "show" –ø—ñ—Å–ª—è —Ä–µ–Ω–¥–µ—Ä—É –∫–∏–ª–∏–º–∞
  useEffect(() => {
    if (showCarpet && carpetRef.current) {
      requestAnimationFrame(() => {
        carpetRef.current.classList.add("show");
      });
    }
  }, [showCarpet]);

  return (
    <div>
      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–µ–ª—é—Å—Ç–æ–∫ */}
      <div id="petals" ref={petalsRef}></div>

      {/* –ë–ª–æ–∫ –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É */}
      <div id="scene">
        <div id="card">
          <p id="greeting">–õ—é–±–∞, –∑ 8 –±–µ—Ä–µ–∑–Ω—è!</p>
          <p>
            <span id="text" ref={textRef}></span>
          </p>
          <p id="author" ref={authorRef} style={{ opacity: 0 }}>
            –ó –ª—é–±–æ–≤'—é –í–∞–ª–µ—Ä–∞
          </p>
          {/* –ö–∏–ª–∏–º –∑‚Äô—è–≤–ª—è—î—Ç—å—Å—è –ø—ñ—Å–ª—è —Ç–µ–∫—Å—Ç—É */}
          {showCarpet && (
            <div id="carpet" ref={carpetRef} >
              <img src={Carpet} alt="Carpet" />
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default App;
